<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Hugo Hermit</title>
		<link>https://forever-crazy.github.io/posts/</link>
		<description>Recent content in Posts on Hugo Hermit</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<lastBuildDate>Sat, 18 Apr 2020 17:00:18 +0800</lastBuildDate>
		<atom:link href="https://forever-crazy.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Week-3 Linux内核编译</title>
			<link>https://forever-crazy.github.io/posts/week-3/</link>
			<pubDate>Sat, 18 Apr 2020 17:00:18 +0800</pubDate>
			
			<guid>https://forever-crazy.github.io/posts/week-3/</guid>
			<description>1.解压内核源码文件  在Linux官网下载内核源代码，在这里可以找到所有的内核版本，我下载的是4.4.218版本。我是先在Windows上下载好后通过虚拟机共享文件夹传到虚拟机中(传过来的共享文件会在/mnt/hgfs目录下)。 进入虚拟机中，将下载的内核压缩文件复制到/home 或其他比较空闲的目录中，然后进入压缩文件所在子目录，分两步解压缩： （1）xz -d linux-4.4.218.tar.xz，大概执行 1 分钟左右，中间没有任何信息显示。 （2）tar –xvf linux-4.4.218.tar 注意：由于编译过程中会生成很多临时文件，所以要确保压缩文件所在子目录有足够的空闲空间，最好能有 15-20GB，我在建立虚拟机时预留了 40GB 磁盘空间。  2.清除残留的.config和.o文件  在开始完全重新编译之前，需要删除所有的编译生成文件(.o文件)、内核配置文件(.config文件)和各种备份文件。后续如果编译过程中出现错误，再次开始完全重新编译之前也需要如此清理。进入 linux-4.4.218 目录， 执行以下命令： #make mrproper 这里可能会提醒安装 ncurses 包，在 Ubuntu 中 ncurses 库的名字是 libncurses5-dev，所以安装命令是： #apt-get install libncurses5-dev 安装完缺少的包之后再次执行命令： #make mrproper  3.配置内核  执行命令： #make menuconfig 运行该命令过程中，可能会出现错误信息： fatal error: curses.h: No such file or directory。 执行命令安装套件 ncurses devel： #apt-get install libncurses5-dev 在之后出现的对话框中选择 save，再 exit 退出。  4.编译内核  执行命令(可使用 make -j4 (4核CPU)来加快编译速度)： #make -j4 内核配置完成后，执行 make 命令开始编译内核，如果编译成功，则生成 Linux 启动映像文件 bzImage(位于.</description>
			<content type="html"><![CDATA[

<h3 id="1-解压内核源码文件">1.解压内核源码文件</h3>

<blockquote>
<h5 id="在-linux官网-https-www-kernel-org-下载内核源代码-在这里可以找到所有的内核版本-我下载的是4-4-218版本-我是先在windows上下载好后通过虚拟机共享文件夹传到虚拟机中-传过来的共享文件会在-mnt-hgfs目录下">在<a href="https://www.kernel.org">Linux官网</a>下载内核源代码，在这里可以找到所有的内核版本，我下载的是4.4.218版本。我是先在Windows上下载好后通过虚拟机共享文件夹传到虚拟机中(传过来的共享文件会在/mnt/hgfs目录下)。</h5>

<h5 id="进入虚拟机中-将下载的内核压缩文件复制到-home-或其他比较空闲的目录中-然后进入压缩文件所在子目录-分两步解压缩">进入虚拟机中，将下载的内核压缩文件复制到/home 或其他比较空闲的目录中，然后进入压缩文件所在子目录，分两步解压缩：</h5>

<h5 id="1-xz-d-linux-4-4-218-tar-xz-大概执行-1-分钟左右-中间没有任何信息显示">（1）xz -d linux-4.4.218.tar.xz，大概执行 1 分钟左右，中间没有任何信息显示。</h5>

<h5 id="2-tar-xvf-linux-4-4-218-tar">（2）tar –xvf linux-4.4.218.tar</h5>

<h5 id="注意-由于编译过程中会生成很多临时文件-所以要确保压缩文件所在子目录有足够的空闲空间-最好能有-15-20gb-我在建立虚拟机时预留了-40gb-磁盘空间">注意：由于编译过程中会生成很多临时文件，所以要确保压缩文件所在子目录有足够的空闲空间，最好能有 15-20GB，我在建立虚拟机时预留了 40GB 磁盘空间。</h5>
</blockquote>

<h3 id="2-清除残留的-config和-o文件">2.清除残留的.config和.o文件</h3>

<blockquote>
<h5 id="在开始完全重新编译之前-需要删除所有的编译生成文件-o文件-内核配置文件-config文件-和各种备份文件-后续如果编译过程中出现错误-再次开始完全重新编译之前也需要如此清理-进入-linux-4-4-218-目录-执行以下命令">在开始完全重新编译之前，需要删除所有的编译生成文件(.o文件)、内核配置文件(.config文件)和各种备份文件。后续如果编译过程中出现错误，再次开始完全重新编译之前也需要如此清理。进入 linux-4.4.218 目录， 执行以下命令：</h5>

<h5 id="make-mrproper">#make mrproper</h5>

<h5 id="这里可能会提醒安装-ncurses-包-在-ubuntu-中-ncurses-库的名字是-libncurses5-dev-所以安装命令是">这里可能会提醒安装 ncurses 包，在 Ubuntu 中 ncurses 库的名字是 libncurses5-dev，所以安装命令是：</h5>

<h5 id="apt-get-install-libncurses5-dev">#apt-get install libncurses5-dev</h5>

<h5 id="安装完缺少的包之后再次执行命令">安装完缺少的包之后再次执行命令：</h5>

<h5 id="make-mrproper-1">#make mrproper</h5>
</blockquote>

<h3 id="3-配置内核">3.配置内核</h3>

<blockquote>
<h5 id="执行命令">执行命令：</h5>

<h5 id="make-menuconfig">#make menuconfig</h5>

<h5 id="运行该命令过程中-可能会出现错误信息">运行该命令过程中，可能会出现错误信息：</h5>

<h5 id="fatal-error-curses-h-no-such-file-or-directory">fatal error: curses.h: No such file or directory。</h5>

<h5 id="执行命令安装套件-ncurses-devel">执行命令安装套件 ncurses devel：</h5>

<h5 id="apt-get-install-libncurses5-dev-1">#apt-get install libncurses5-dev</h5>

<h5 id="在之后出现的对话框中选择-save-再-exit-退出">在之后出现的对话框中选择 save，再 exit 退出。</h5>
</blockquote>

<h3 id="4-编译内核">4.编译内核</h3>

<blockquote>
<h5 id="执行命令-可使用-make-j4-4核cpu-来加快编译速度">执行命令(可使用 make -j4 (4核CPU)来加快编译速度)：</h5>

<h5 id="make-j4">#make -j4</h5>

<h5 id="内核配置完成后-执行-make-命令开始编译内核-如果编译成功-则生成-linux-启动映像文件-bzimage-位于-arch-x86-64-boot-bzimage中">内核配置完成后，执行 make 命令开始编译内核，如果编译成功，则生成 Linux 启动映像文件 bzImage(位于./arch/x86_64/boot/bzImage中)。</h5>

<h5 id="编译过程中-可能会出现一些错误-通常都是因为缺少某个库-一般根据相应的错误提示-安装相应的包即可-然后重新编译">编译过程中，可能会出现一些错误，通常都是因为缺少某个库，一般根据相应的错误提示，安装相应的包即可，然后重新编译：</h5>

<h5 id="1-缺少-openssl">(1).缺少 openssl：</h5>

<h5 id="apt-get-install-libssl-dev">#apt-get install libssl-dev</h5>

<h5 id="2-缺少-bison">(2).缺少 bison：</h5>

<h5 id="apt-get-install-bison">#apt-get install bison</h5>

<h5 id="3-缺少-flex">(3).缺少 flex :</h5>

<h5 id="apt-get-install-flex">#apt-get install flex</h5>
</blockquote>

<h3 id="5-编译模块">5.编译模块</h3>

<blockquote>
<h5 id="执行命令-1">执行命令：</h5>

<h5 id="make-modules">#make modules</h5>
</blockquote>

<h3 id="6-安装内核">6.安装内核</h3>

<blockquote>
<h5 id="1-安装模块">(1).安装模块：</h5>

<h5 id="make-modules-install">#make modules_install</h5>

<h5 id="2-安装内核">(2).安装内核：</h5>

<h5 id="make-install">#make install</h5>
</blockquote>

<h3 id="7-配置-grub-引导程序">7.配置 grub 引导程序</h3>

<blockquote>
<h5 id="执行命令-2">执行命令：</h5>

<h5 id="update-grub2">#update-grub2，</h5>

<h5 id="该命令会自动修改-grub">该命令会自动修改 grub。</h5>
</blockquote>

<h3 id="8-重启系统">8.重启系统</h3>

<blockquote>
<h5 id="执行命令-reboot-使用新内核启动-linux">执行命令： #reboot  使用新内核启动 linux</h5>

<h5 id="启动完成后进入终端执行命令-uname-a-查看内核版本">启动完成后进入终端执行命令：#uname -a 查看内核版本</h5>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>Week-2 一些基础的numpy笔记</title>
			<link>https://forever-crazy.github.io/posts/week-2-%E7%AC%94%E8%AE%B0/</link>
			<pubDate>Thu, 09 Apr 2020 21:16:17 +0800</pubDate>
			
			<guid>https://forever-crazy.github.io/posts/week-2-%E7%AC%94%E8%AE%B0/</guid>
			<description>import numpy as np #访问数组元素 x = np.arange(100).reshape(10, 10) y = x[[1, 2, 3]] z = x[[1, 2, 3, 4], [3, 2, 1, 5]] # y:[[10 11 12 13 14 15 16 17 18 19] # [20 21 22 23 24 25 26 27 28 29] # [30 31 32 33 34 35 36 37 38 39]] # z:[13 22 31 45] #随机函数 a = np.random.randn(2, 3) #生成指定维度的标准正态分布(以0为均值,1为标准差)的数据 b = np.</description>
			<content type="html"><![CDATA[<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>

<span class="c1">#访问数组元素</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">x</span><span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]]</span>                      
<span class="n">z</span> <span class="o">=</span> <span class="n">x</span><span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">]]</span>     
<span class="c1"># y:[[10 11 12 13 14 15 16 17 18 19]</span>
<span class="c1">#    [20 21 22 23 24 25 26 27 28 29]</span>
<span class="c1">#    [30 31 32 33 34 35 36 37 38 39]]</span>
<span class="c1"># z:[13 22 31 45]</span>




<span class="c1">#随机函数</span>
<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>               <span class="c1">#生成指定维度的标准正态分布(以0为均值,1为标准差)的数据</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>                <span class="c1">#生成指定维度的[0,1)之间的数据</span>
<span class="n">c</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>     <span class="c1">#生成指定维度的[low, high)之间的数据</span>
<span class="n">d</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">normal</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>  <span class="c1">#生成指定维度,均值和标准差的数据</span>
<span class="c1"># np.random.randint(low, high, size=None)</span>
<span class="c1"># np.random.normal(loc=0.0, scale=1.0, size=None)  loc-均值, scale-标准差, size-输出数组的维度</span>

<span class="c1"># a:[[ 0.33657969 -1.61872007 -0.27066839]</span>
<span class="c1">#    [-0.53723194 -0.97942758 -0.1125657 ]]</span>
<span class="c1"># b:[[0.47498773 0.75084041 0.18145901]</span>
<span class="c1">#    [0.49586018 0.55316644 0.29942542]]</span>
<span class="c1"># c:[[4 3 1]</span>
<span class="c1">#    [3 1 2]]</span>
<span class="c1"># d:[[-0.73128138  0.79407804 -1.6553577 ]</span>
<span class="c1">#    [ 0.88243182 -1.17655312  3.52462544]]</span>

<span class="c1"># np.random.choice(a, size=None) -- 从[0,a)中随机抽取数字,并返回指定大小的数组(一维数组)</span>
<span class="n">x1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>         <span class="c1">#返回一个[0,5)的数字</span>
<span class="n">x2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>     <span class="c1">#返回一个含有10个[0,5)数字的一维数组</span>
<span class="c1"># x1 = 2</span>
<span class="c1"># x2 = [1 0 2 4 1 2 4 4 4 1]</span>




<span class="c1"># np.maximum, np.exp, np.argmax, np.zeros, np.ones, np.append, np.where</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>
<span class="n">n</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">6</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">])</span>
<span class="n">k</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">maximum</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>       <span class="c1">#将两个数组(或一个数组和一个数字)逐位比较,选择最大值,返回数组</span>
<span class="c1"># k = [6 2 2 7 8]</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>
<span class="n">a1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>       <span class="c1">#e的幂次方</span>
<span class="n">a2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>       <span class="c1">#e为底的底数计算</span>
<span class="c1"># [ 2.71828183   7.3890561   20.08553692  54.59815003 148.4131591 ]</span>
<span class="c1"># [ 0.           0.69314718  1.09861229   1.38629436  1.60943791  ]</span>

<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>
<span class="n">c</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>     <span class="c1">#返回最大值在数组中对应的下标</span>
<span class="c1"># c = 2</span>

<span class="n">y1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
<span class="n">y2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
<span class="c1"># y1:[[0. 0. 0.]</span>
<span class="c1">#     [0. 0. 0.]]</span>
<span class="c1"># y2:[[1. 1. 1.]</span>
<span class="c1">#     [1. 1. 1.]]</span>

<span class="n">x1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">x2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">])</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">x1</span><span class="p">,</span> <span class="n">x2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>    
<span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">x1</span><span class="p">,</span> <span class="n">x2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>    <span class="c1">#即np.append(x1, x2)</span>
<span class="c1"># x:[[1 -1]         </span>
<span class="c1">#    [2 -2]</span>
<span class="c1">#    [3 -3]]</span>
<span class="c1"># y:[1, 2, 3, -1, -2, -3]</span>

<span class="n">a</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">]]</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">,</span> <span class="s2">&#34;Yes&#34;</span><span class="p">,</span> <span class="s2">&#34;No&#34;</span><span class="p">)</span>
<span class="c1"># b:[[&#39;No&#39;  &#39;Yes&#39; &#39;Yes&#39;]</span>
<span class="c1">#    [&#39;Yes&#39; &#39;Yes&#39; &#39;Yes&#39;]</span>
<span class="c1">#    [&#39;No&#39;  &#39;Yes&#39; &#39;Yes&#39;]]</span>

<span class="c1"># axis = 0(按列计算),axis = 1(按行计算)</span>

<span class="n">m</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>
<span class="n">n</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">6</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>
<span class="n">z</span> <span class="o">=</span> <span class="n">n</span> <span class="o">*</span> <span class="p">(</span><span class="n">m</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
<span class="c1"># z = [0 2 3 0 5]</span>




<span class="c1"># array数组和matrix矩阵的区别:</span>
<span class="c1"># matrix只能是二维的，array可以是多维的</span>
<span class="c1"># array中的相乘是对应元素的相乘，而matrix中的相乘得到的是矩阵积</span>
<span class="n">a1</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]]</span>
<span class="n">a2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">mat</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>
<span class="n">a3</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">mat</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>
<span class="n">a4</span> <span class="o">=</span> <span class="n">a2</span> <span class="o">*</span> <span class="n">a3</span><span class="o">.</span><span class="n">T</span>   <span class="c1">#(a4 = np.dot(a2, a3.T))</span>
<span class="c1"># a4:[[14 32]</span>
<span class="c1">#     [32 77]]</span>

<span class="n">a1</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]]</span>
<span class="n">a2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>
<span class="n">a3</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>
<span class="n">a4</span> <span class="o">=</span> <span class="n">a2</span> <span class="o">*</span> <span class="n">a3</span>
<span class="c1"># a4:[[ 1  4  9]</span>
<span class="c1">#     [16 25 36]]</span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Week-1 mnist手写数字识别</title>
			<link>https://forever-crazy.github.io/posts/week-1/</link>
			<pubDate>Sun, 05 Apr 2020 10:42:49 +0800</pubDate>
			
			<guid>https://forever-crazy.github.io/posts/week-1/</guid>
			<description>实现了一个简单的mnist手写数字识别的3层神经网络，没什么技术含量。
在这里采用了正态分布来初始化权重值，使用sigmoid函数当激活函数。
import scipy.special import pandas as pd import numpy as np class NeutralNetwork(): def __init__(self,inputnumber, hidenumber, outnumber, learningrate): self.inum = inputnumber self.hnum = hidenumber self.onum = outnumber self.lr = learningrate # np.random.normal(loc=0.0, scale=1.0, size=None) loc-均值, scale-标准差, size-输出数组的维度 self.inputweight = np.random.normal(0.0, pow(self.hnum, -0.5), (self.hnum, self.inum)) self.hideweight = np.random.normal(0.0, pow(self.onum, -0.5), (self.onum, self.hnum)) self.activation_function = lambda x : scipy.special.expit(x) # sigmoid函数 def train(self, inputlist, outputlist): inlist = np.array(inputlist).reshape(-1, 1) oulist = np.</description>
			<content type="html"><![CDATA[<p>实现了一个简单的mnist手写数字识别的3层神经网络，没什么技术含量。</p>

<p>在这里采用了正态分布来初始化权重值，使用sigmoid函数当激活函数。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">scipy.special</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="kn">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>

<span class="k">class</span> <span class="nc">NeutralNetwork</span><span class="p">():</span>
  <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">inputnumber</span><span class="p">,</span> <span class="n">hidenumber</span><span class="p">,</span> <span class="n">outnumber</span><span class="p">,</span> <span class="n">learningrate</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">inum</span> <span class="o">=</span> <span class="n">inputnumber</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">hnum</span> <span class="o">=</span> <span class="n">hidenumber</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">onum</span> <span class="o">=</span> <span class="n">outnumber</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">lr</span> <span class="o">=</span> <span class="n">learningrate</span>

    <span class="c1"># np.random.normal(loc=0.0, scale=1.0, size=None)  loc-均值, scale-标准差, size-输出数组的维度</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">inputweight</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">normal</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="nb">pow</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">hnum</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.5</span><span class="p">),</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">hnum</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">inum</span><span class="p">))</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">hideweight</span>  <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">normal</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="nb">pow</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">onum</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.5</span><span class="p">),</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">onum</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">hnum</span><span class="p">))</span>

    <span class="bp">self</span><span class="o">.</span><span class="n">activation_function</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span> <span class="n">scipy</span><span class="o">.</span><span class="n">special</span><span class="o">.</span><span class="n">expit</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>       <span class="c1"># sigmoid函数</span>

  <span class="k">def</span> <span class="nf">train</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">inputlist</span><span class="p">,</span> <span class="n">outputlist</span><span class="p">):</span>
    <span class="n">inlist</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">inputlist</span><span class="p">)</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">oulist</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">outputlist</span><span class="p">)</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    
    <span class="n">hideinput</span>   <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">inputweight</span><span class="p">,</span> <span class="n">inlist</span><span class="p">)</span>
    <span class="n">hideoutput</span>  <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">activation_function</span><span class="p">(</span><span class="n">hideinput</span><span class="p">)</span>

    <span class="n">finalinput</span>  <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">hideweight</span><span class="p">,</span> <span class="n">hideoutput</span><span class="p">)</span>
    <span class="n">finaloutput</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">activation_function</span><span class="p">(</span><span class="n">finalinput</span><span class="p">)</span>

    <span class="n">output_error</span> <span class="o">=</span> <span class="n">oulist</span> <span class="o">-</span> <span class="n">finaloutput</span>
    <span class="n">hidden_error</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">hideweight</span><span class="o">.</span><span class="n">T</span><span class="p">,</span> <span class="n">output_error</span><span class="p">)</span>

    <span class="c1">#更新权重</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">hideweight</span>  <span class="o">+=</span> <span class="bp">self</span><span class="o">.</span><span class="n">lr</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">((</span><span class="n">output_error</span> <span class="o">*</span> <span class="n">finaloutput</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">finaloutput</span><span class="p">)),</span> 
                                        <span class="n">np</span><span class="o">.</span><span class="n">transpose</span><span class="p">(</span><span class="n">hideoutput</span><span class="p">))</span>      
    <span class="bp">self</span><span class="o">.</span><span class="n">inputweight</span> <span class="o">+=</span> <span class="bp">self</span><span class="o">.</span><span class="n">lr</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">((</span><span class="n">hidden_error</span> <span class="o">*</span> <span class="n">hideoutput</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">hideoutput</span><span class="p">)),</span>
                                        <span class="n">np</span><span class="o">.</span><span class="n">transpose</span><span class="p">(</span><span class="n">inlist</span><span class="p">))</span>

  <span class="k">def</span> <span class="nf">query</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">inputlist</span><span class="p">):</span>
    <span class="n">inlist</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">inputlist</span><span class="p">)</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    
    <span class="n">hideinput</span>   <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">inputweight</span><span class="p">,</span> <span class="n">inlist</span><span class="p">)</span>
    <span class="n">hideoutput</span>  <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">activation_function</span><span class="p">(</span><span class="n">hideinput</span><span class="p">)</span>

    <span class="n">finalinput</span>  <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">hideweight</span><span class="p">,</span> <span class="n">hideoutput</span><span class="p">)</span>
    <span class="n">finaloutput</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">activation_function</span><span class="p">(</span><span class="n">finalinput</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">finaloutput</span>

<span class="n">inputnumber</span>  <span class="o">=</span> <span class="mi">784</span>
<span class="n">hidenumber</span>   <span class="o">=</span> <span class="mi">100</span>
<span class="n">outputnumber</span> <span class="o">=</span> <span class="mi">10</span>
<span class="n">learningrate</span> <span class="o">=</span> <span class="mf">0.1</span>

<span class="n">text</span> <span class="o">=</span> <span class="n">NeutralNetwork</span><span class="p">(</span><span class="n">inputnumber</span><span class="p">,</span> <span class="n">hidenumber</span><span class="p">,</span> <span class="n">outputnumber</span><span class="p">,</span> <span class="n">learningrate</span><span class="p">)</span>

<span class="n">train_data</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;mnist\mnist_train.csv&#34;</span><span class="p">,</span> <span class="n">header</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="n">usecols</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">785</span><span class="p">)])</span>
<span class="n">test_data</span>  <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;mnist\mnist_test.csv&#34;</span><span class="p">,</span> <span class="n">header</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="n">usecols</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">785</span><span class="p">)])</span>

<span class="n">train_samples</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">train_data</span><span class="o">.</span><span class="n">shape</span>      <span class="c1"># train_samples 训练样本数量</span>
<span class="n">test_samples</span><span class="p">,</span> <span class="n">_</span>  <span class="o">=</span> <span class="n">test_data</span><span class="o">.</span><span class="n">shape</span>       <span class="c1"># test_samples 测试样本数量</span>

<span class="n">epoches</span> <span class="o">=</span> <span class="mi">10</span>      <span class="c1">#迭代次数</span>
<span class="k">for</span> <span class="n">epoch</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">epoches</span><span class="p">):</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">train_samples</span><span class="p">):</span>
    <span class="n">train_X</span>  <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">train_data</span><span class="p">)[</span><span class="n">i</span> <span class="p">,</span> <span class="mi">1</span><span class="p">:]</span> <span class="o">/</span> <span class="mf">255.0</span> <span class="o">*</span> <span class="mf">0.99</span> <span class="o">+</span> <span class="mf">0.01</span>    <span class="c1">#归一化(将所有输入数据变成(0, 1)之间的小数)</span>
    <span class="n">y_value</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">train_data</span><span class="p">)[</span><span class="n">i</span> <span class="p">,</span> <span class="mi">0</span><span class="p">]</span>      <span class="c1">#输入数据对应的类别标签</span>
    <span class="n">train_y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">outputnumber</span><span class="p">)</span> <span class="o">+</span> <span class="mf">0.01</span>
    <span class="n">train_y</span><span class="p">[</span><span class="n">y_value</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.99</span>                    <span class="c1">#将类别标签转换为one hot编码</span>
    <span class="n">text</span><span class="o">.</span><span class="n">train</span><span class="p">(</span><span class="n">train_X</span><span class="p">,</span> <span class="n">train_y</span><span class="p">)</span>               <span class="c1">#训练数据</span>

<span class="n">true_samples</span> <span class="o">=</span> <span class="mi">0</span>         <span class="c1">#测试样本中预测正确的样本数量</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">test_samples</span><span class="p">):</span>
  <span class="n">test_X</span> <span class="o">=</span> <span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">test_data</span><span class="p">)[</span><span class="n">i</span> <span class="p">,</span> <span class="mi">1</span><span class="p">:])</span> <span class="o">/</span> <span class="mf">255.0</span> <span class="o">*</span> <span class="mf">0.99</span> <span class="o">+</span> <span class="mf">0.01</span>
  <span class="n">y_pred</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">test_X</span><span class="p">)</span>                <span class="c1">#训练测试样本数据所预测的类别标签</span>
  <span class="n">test_y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">test_data</span><span class="p">)[</span><span class="n">i</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>
  <span class="k">if</span> <span class="n">np</span><span class="o">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">y_pred</span><span class="p">)</span> <span class="o">==</span> <span class="n">test_y</span><span class="p">:</span>            <span class="c1">#比较预测标签和给定标签是否相等</span>
    <span class="n">true_samples</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="n">accuracy</span> <span class="o">=</span> <span class="n">true_samples</span> <span class="o">/</span> <span class="n">test_samples</span>       <span class="c1">#正确率</span>
<span class="k">print</span><span class="p">(</span><span class="n">accuracy</span><span class="p">)</span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Week-0 从零开始</title>
			<link>https://forever-crazy.github.io/posts/week-0/</link>
			<pubDate>Mon, 23 Mar 2020 00:00:00 +0000</pubDate>
			
			<guid>https://forever-crazy.github.io/posts/week-0/</guid>
			<description>​ 其实很早就有写博客的想法，但到真正下笔时却总是被我以各种理由开脱，理由也不外乎两个：一是总觉得自己水平太低，脑子里没货，实在想不出写什么；二是碍于贫乏的词汇量和表达能力，我总是无法准确清楚地表达出自己的想法和理解。(好吧，或许还是因为我太懒qwq
​ 就这样，磨蹭了很久，直到今天终于下定决心开始写博客，去养成一个好的习惯，也不管写什么，反正只要能写出东西就可以。当然咯，我毕竟还太菜，写出来的东西水平或许还太低，不过没关系，从零开始，每次写一点点，每次进步一点点，量变终究会引起质变。
Come on!!!</description>
			<content type="html"><![CDATA[<p>​    其实很早就有写博客的想法，但到真正下笔时却总是被我以各种理由开脱，理由也不外乎两个：一是总觉得自己水平太低，脑子里没货，实在想不出写什么；二是碍于贫乏的词汇量和表达能力，我总是无法准确清楚地表达出自己的想法和理解。(好吧，或许还是因为我太懒qwq</p>

<p>​    就这样，磨蹭了很久，直到今天终于下定决心开始写博客，去养成一个好的习惯，也不管写什么，反正只要能写出东西就可以。当然咯，我毕竟还太菜，写出来的东西水平或许还太低，不过没关系，从零开始，每次写一点点，每次进步一点点，量变终究会引起质变。</p>

<p>Come on!!!</p>
]]></content>
		</item>
		
		<item>
			<title>Getting Started with Hugo</title>
			<link>https://forever-crazy.github.io/posts/getting-started-with-hugo/</link>
			<pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
			
			<guid>https://forever-crazy.github.io/posts/getting-started-with-hugo/</guid>
			<description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
			<content type="html"><![CDATA[

<h2 id="step-1-install-hugo">Step 1. Install Hugo</h2>

<p>Go to <a href="https://github.com/spf13/hugo/releases">Hugo releases</a> and download the
appropriate version for your OS and architecture.</p>

<p>Save it somewhere specific as we will be using it in the next step.</p>

<p>More complete instructions are available at <a href="https://gohugo.io/getting-started/installing/">Install Hugo</a></p>

<h2 id="step-2-build-the-docs">Step 2. Build the Docs</h2>

<p>Hugo has its own example site which happens to also be the documentation site
you are reading right now.</p>

<p>Follow the following steps:</p>

<ol>
<li>Clone the <a href="http://github.com/spf13/hugo">Hugo repository</a></li>
<li>Go into the repo</li>
<li>Run hugo in server mode and build the docs</li>
<li>Open your browser to <a href="http://localhost:1313">http://localhost:1313</a></li>
</ol>

<p>Corresponding pseudo commands:</p>

<pre><code>git clone https://github.com/spf13/hugo
cd hugo
/path/to/where/you/installed/hugo server --source=./docs
&gt; 29 pages created
&gt; 0 tags index created
&gt; in 27 ms
&gt; Web Server is available at http://localhost:1313
&gt; Press ctrl+c to stop
</code></pre>

<p>Once you&rsquo;ve gotten here, follow along the rest of this page on your local build.</p>

<h2 id="step-3-change-the-docs-site">Step 3. Change the docs site</h2>

<p>Stop the Hugo process by hitting Ctrl+C.</p>

<p>Now we are going to run hugo again, but this time with hugo in watch mode.</p>

<pre><code>/path/to/hugo/from/step/1/hugo server --source=./docs --watch
&gt; 29 pages created
&gt; 0 tags index created
&gt; in 27 ms
&gt; Web Server is available at http://localhost:1313
&gt; Watching for changes in /Users/spf13/Code/hugo/docs/content
&gt; Press ctrl+c to stop
</code></pre>

<p>Open your <a href="http://vim.spf13.com">favorite editor</a> and change one of the source
content pages. How about changing this very file to <em>fix the typo</em>. How about changing this very file to <em>fix the typo</em>.</p>

<p>Content files are found in <code>docs/content/</code>. Unless otherwise specified, files
are located at the same relative location as the url, in our case
<code>docs/content/overview/quickstart.md</code>.</p>

<p>Change and save this file.. Notice what happened in your terminal.</p>

<pre><code>&gt; Change detected, rebuilding site

&gt; 29 pages created
&gt; 0 tags index created
&gt; in 26 ms
</code></pre>

<p>Refresh the browser and observe that the typo is now fixed.</p>

<p>Notice how quick that was. Try to refresh the site before it&rsquo;s finished building. I double dare you.
Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.</p>

<h2 id="step-4-have-fun">Step 4. Have fun</h2>

<p>The best way to learn something is to play with it.</p>
]]></content>
		</item>
		
	</channel>
</rss>
