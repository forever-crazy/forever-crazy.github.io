<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Hugo Hermit</title>
		<link>https://forever-crazy.github.io/posts/</link>
		<description>Recent content in Posts on Hugo Hermit</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<lastBuildDate>Thu, 07 May 2020 11:07:58 +0800</lastBuildDate>
		<atom:link href="https://forever-crazy.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Week-3~5 操作系统实验一：Linux 内核编译及添加系统调用</title>
			<link>https://forever-crazy.github.io/posts/week-3~5/</link>
			<pubDate>Thu, 07 May 2020 11:07:58 +0800</pubDate>
			
			<guid>https://forever-crazy.github.io/posts/week-3~5/</guid>
			<description>最近一直在折腾操作系统实验一的作业，前前后后我花了两个多星期在这作业上，踩了不少坑。不过最后好歹是搞成功了，也算是有点收获，刚好在这里记录一下。
​ 作业内容要求如下：
 (1).添加一个系统调用，实现对指定进程的 nice 值的修改或读取功能，并返回进程最新的 nice 值及优先级 prio。建议调用原型为： int mysetnice(pid_t pid, int flag, int nicevalue, void __user * prio, void __user * nice); 参数含义：  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pid：进程 ID。&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;flag：若值为 0，表示读取 nice 值；若值为 1，表示修改 nice 值。 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nicevalue：为指定进程设置的新 nice 值。 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;prio、nice：指向进程当前优先级 prio 及 nice 值。返回值：系统调用成功时返回 0，失败时返回错误码 EFAULT。 (2).写一个简单的应用程序测试 (1) 中添加的系统调用。 (3).若程序中调用了 Linux 的内核函数，要求深入阅读相关函数源码。  首先要搞清楚这几个概念：
(1).prio：prio值表示进程的优先级，进程prio值越小则优先级越高。 (2).nice：nice值表示进程优先级的修正数值，范围是从-20到19。正值表示调整到低优先级，负值表示调整到高优先级，值为零则表示不会调整该进程的优先级。 (3).pid_t： typedef __kernel_pid_t pid_t; typedef int __kernel_pid_t; 可以看出pid_t其实就是int类型，使用pid_t是为了可移植性好一些，因为在不同的平台上可能会有： typedef int pid_t; 或： typedef long pid_t; (4).</description>
			<content type="html"><![CDATA[

<p>最近一直在折腾操作系统实验一的作业，前前后后我花了两个多星期在这作业上，踩了不少坑。不过最后好歹是搞成功了，也算是有点收获，刚好在这里记录一下。</p>

<p>​    作业内容要求如下：</p>

<blockquote>
<h5 id="1-添加一个系统调用-实现对指定进程的-nice-值的修改或读取功能-并返回进程最新的-nice-值及优先级-prio-br-建议调用原型为-br-int-mysetnice-pid-t-pid-int-flag-int-nicevalue-void-user-prio-void-user-nice-br-参数含义-br-nbsp-nbsp-nbsp-nbsp-pid-进程-id-br-nbsp-nbsp-nbsp-nbsp-flag-若值为-0-表示读取-nice-值-若值为-1-表示修改-nice-值-br-nbsp-nbsp-nbsp-nbsp-nicevalue-为指定进程设置的新-nice-值-br-nbsp-nbsp-nbsp-nbsp-prio-nice-指向进程当前优先级-prio-及-nice-值-br-返回值-系统调用成功时返回-0-失败时返回错误码-efault">(1).添加一个系统调用，实现对指定进程的 nice 值的修改或读取功能，并返回进程最新的 nice 值及优先级 prio。<br/>建议调用原型为：<br/> int mysetnice(pid_t pid, int flag, int nicevalue,  void __user * prio, void __user * nice);<br/> 参数含义： <br/> &nbsp;&nbsp;&nbsp;&nbsp;pid：进程 ID。<br/>&nbsp;&nbsp;&nbsp;&nbsp;flag：若值为 0，表示读取 nice 值；若值为 1，表示修改 nice 值。<br/> &nbsp;&nbsp;&nbsp;&nbsp;nicevalue：为指定进程设置的新 nice 值。 <br/>&nbsp;&nbsp;&nbsp;&nbsp;prio、nice：指向进程当前优先级 prio 及 nice 值。<br/>返回值：系统调用成功时返回 0，失败时返回错误码 EFAULT。</h5>

<h5 id="2-写一个简单的应用程序测试-1-中添加的系统调用">(2).写一个简单的应用程序测试 (1) 中添加的系统调用。</h5>

<h5 id="3-若程序中调用了-linux-的内核函数-要求深入阅读相关函数源码">(3).若程序中调用了 Linux 的内核函数，要求深入阅读相关函数源码。</h5>
</blockquote>

<p>首先要搞清楚这几个概念：</p>

<h5 id="1-prio-br-prio值表示进程的优先级-进程prio值越小则优先级越高">(1).prio：<br/>prio值表示进程的优先级，进程prio值越小则优先级越高。</h5>

<h5 id="2-nice-br-nice值表示进程优先级的修正数值-范围是从-20到19-正值表示调整到低优先级-负值表示调整到高优先级-值为零则表示不会调整该进程的优先级">(2).nice：<br/>nice值表示进程优先级的修正数值，范围是从-20到19。正值表示调整到低优先级，负值表示调整到高优先级，值为零则表示不会调整该进程的优先级。</h5>

<h5 id="3-pid-t">(3).pid_t：</h5>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="k">typedef</span> <span class="n">__kernel_pid_t</span>  <span class="n">pid_t</span><span class="p">;</span>
<span class="k">typedef</span> <span class="kt">int</span> <span class="n">__kernel_pid_t</span><span class="p">;</span></code></pre></div>
<h5 id="可以看出pid-t其实就是int类型-使用pid-t是为了可移植性好一些-因为在不同的平台上可能会有">可以看出pid_t其实就是int类型，使用pid_t是为了可移植性好一些，因为在不同的平台上可能会有：</h5>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="k">typedef</span> <span class="kt">int</span> <span class="n">pid_t</span><span class="p">;</span></code></pre></div>
<h5 id="或">或：</h5>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="k">typedef</span> <span class="kt">long</span> <span class="n">pid_t</span><span class="p">;</span></code></pre></div>
<h5 id="4-void-user-br-void-user-arg中的arg是一个用户空间的地址-而用户空间和内核空间之间不能简单地使用指针进行传递-故linux内核提供了多个函数和宏用于内核空间和用户空间传递数据-例如copy-from-user-copy-to-user-get-user-put-user等">(4).void __user*：<br/>(void __user*)arg中的arg是一个用户空间的地址，而用户空间和内核空间之间不能简单地使用指针进行传递，故linux内核提供了多个函数和宏用于内核空间和用户空间传递数据，例如copy_from_user，copy_to_user，get_user，put_user等。</h5>

<p>大概了解完后就是正式开始了。</p>

<h3 id="一-下载和解压缩内核源代码文件">一.下载和解压缩内核源代码文件</h3>

<p>​    首先在<a href="https://www.kernel.org/">Linux官网</a>下载内核源代码，在这里可以找到所有的内核版本。我下载的是4.19.120版本的，个人感觉下载的内核版本最好要高于虚拟机内核版本，之前下载4.4.218版本，莫名其妙碰到好多坑，一换4.19.120立马就好了。</p>

<p>​    由于我虚拟机下载贼慢，所以我是先在Windows上下载好后通过虚拟机共享文件夹传到虚拟机中(传过来的共享文件会在/mnt/hgfs目录下)。</p>

<p>进入虚拟机后，将传过来的压缩文件复制到/usr/src目录下，分两步解压缩：</p>

<h5 id="1-xz-d-linux-4-19-120-tar-xz">（1）xz -d linux-4.19.120.tar.xz</h5>

<h5 id="2-tar-xvf-linux-4-19-120-tar">（2）tar –xvf linux-4.19.120.tar</h5>

<p>注意：由于编译过程中会生成很多临时文件，所以要确保有足够的空闲空间，最好起码能有 20GB，我在建立虚拟机时预留了 40GB 磁盘空间(后来又扩展到60G&hellip;)。</p>

<h3 id="二-清除残留的-config和-o文件">二.清除残留的.config和.o文件</h3>

<p>每次开始完全重新编译之前，需要删除所有的编译生成文件(.o文件)、内核配置文件(.config文件)和各种备份文件。后续如果编译过程中出现错误，再次开始完全重新编译之前也需要如此清理。进入 linux-4.19.120 目录， 执行以下命令：</p>

<h5 id="make-mrproper">#make mrproper</h5>

<p>这里可能会提醒安装 ncurses 包，在 Ubuntu 中 ncurses 库的名字是 libncurses5-dev，所以安装命令是：</p>

<h5 id="apt-get-install-libncurses5-dev">#apt-get install libncurses5-dev</h5>

<p>安装完缺少的包之后再次执行命令：</p>

<h5 id="make-mrproper-1">#make mrproper</h5>

<p><br/><br/></p>

<h3 id="三-添加系统调用">三.添加系统调用</h3>

<h4 id="1-分配系统调用号-修改系统调用表">1. 分配系统调用号，修改系统调用表</h4>

<p>查看系统调用表(arch/x86/entry/syscalls/syscall_64.tbl)，每个系统调用在表中占一表项，其格式为：  &lt;系统调用号&gt; <commom/64/x32> &lt;系统调用名&gt; &lt;服务例程入口地址&gt;</p>

<p>选择一个未使用的系统调用号进行分配，比如当前系统使用到 334 号，则新添加的系统调用可使用 335 号。确定调用号后，在 syscall_64.tbl 文件中为新调用添加一条记录，如图所示：</p>

<p><img src="https://github.com/forever-crazy/forever-crazy.github.io/tree/master/images/__x64_sys_mysetnice.jpg" alt="系统调用表" /></p>

<h4 id="2-申明系统调用服务例程原型">2.申明系统调用服务例程原型</h4>

<p>查看Linux 系统调用服务例程的原型声明(include/linux/syscalls.h)，并在文件末尾添加相应原型声明，如图所示：</p>

<p><img src="https://github.com/forever-crazy/forever-crazy.github.io/tree/master/images/sys_mysetnice.jpg" alt="系统调用服务例程原型" /></p>

<h4 id="3-实现系统调用服务例程">3.实现系统调用服务例程</h4>

<p>为新调用mysetnice编写服务例程sys_mysetnice，添加在 sys.c 文件(kernel/sys.c)中，代码如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="n">SYSCALL_DEFINE5</span><span class="p">(</span><span class="n">mysetnice</span><span class="p">,</span>  <span class="n">pid_t</span><span class="p">,</span> <span class="n">pid</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="n">flag</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="n">nicevalue</span><span class="p">,</span> <span class="kt">void</span> <span class="n">__user</span><span class="o">*</span><span class="p">,</span> <span class="n">prio</span><span class="p">,</span> <span class="kt">void</span> <span class="n">__user</span><span class="o">*</span><span class="p">,</span> <span class="n">nice</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">struct</span> <span class="n">pid</span> <span class="o">*</span><span class="n">id</span><span class="p">;</span>    	    <span class="c1">//进程标识符结构体
</span><span class="c1"></span>	<span class="k">struct</span> <span class="n">task_struct</span> <span class="o">*</span><span class="n">pcb</span><span class="p">;</span>    <span class="c1">//进程结构体
</span><span class="c1"></span>
	<span class="kt">int</span> <span class="n">new_nice</span><span class="p">,</span> <span class="n">new_prio</span><span class="p">;</span>

	<span class="n">id</span> <span class="o">=</span> <span class="n">find_get_pid</span><span class="p">(</span><span class="n">pid</span><span class="p">);</span>     <span class="c1">//根据进程ID号获得进程标识符
</span><span class="c1"></span>	<span class="n">pcb</span> <span class="o">=</span> <span class="n">pid_task</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">PIDTYPE_PID</span><span class="p">);</span>  
	<span class="c1">//根据进程标识符获得指定进程，PIDTYPE_PID为进程类型的PID，除此之外还有线程，会话等类型的PID
</span><span class="c1"></span>	
	<span class="n">new_nice</span> <span class="o">=</span> <span class="n">task_nice</span><span class="p">(</span><span class="n">pcb</span><span class="p">);</span>    <span class="c1">//获得该进程的nice值
</span><span class="c1"></span>	<span class="n">new_prio</span> <span class="o">=</span> <span class="n">task_prio</span><span class="p">(</span><span class="n">pcb</span><span class="p">);</span>    <span class="c1">//获得该进程的prio值
</span><span class="c1"></span>
	<span class="k">if</span><span class="p">(</span><span class="n">flag</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>      <span class="c1">//flag为0的情况
</span><span class="c1"></span>	<span class="p">{</span>
		<span class="n">copy_to_user</span><span class="p">(</span><span class="n">nice</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">new_nice</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">new_nice</span><span class="p">));</span>
		<span class="n">copy_to_user</span><span class="p">(</span><span class="n">prio</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">new_prio</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">new_prio</span><span class="p">));</span>
		<span class="c1">//将数据从内核空间拷贝到用户空间中	
</span><span class="c1"></span>		<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">flag</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>       <span class="c1">//flag为1的情况
</span><span class="c1"></span>	<span class="p">{</span>
		<span class="n">set_user_nice</span><span class="p">(</span><span class="n">pcb</span><span class="p">,</span> <span class="n">nicevalue</span><span class="p">);</span>
		<span class="c1">//设置该进程的nice值为nicevalue
</span><span class="c1"></span>		
		<span class="n">new_nice</span> <span class="o">=</span> <span class="n">task_nice</span><span class="p">(</span><span class="n">pcb</span><span class="p">);</span>
		<span class="n">new_prio</span> <span class="o">=</span> <span class="n">task_prio</span><span class="p">(</span><span class="n">pcb</span><span class="p">);</span>
 		<span class="c1">//由于进程的nice值被修改了，故需要重新获取进程的nice值和prio值
</span><span class="c1"></span>		
		<span class="n">copy_to_user</span><span class="p">(</span><span class="n">nice</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">new_nice</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">new_nice</span><span class="p">));</span>
		<span class="n">copy_to_user</span><span class="p">(</span><span class="n">prio</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">new_prio</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">new_prio</span><span class="p">));</span>
		<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>	
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">EFAULT</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>
<p><br/><br/></p>

<h3 id="四-配置和编译内核">四.配置和编译内核</h3>

<p>执行命令：</p>

<h5 id="make-menuconfig">#make menuconfig</h5>

<p>运行该命令过程中，可能会出现错误信息：fatal error: curses.h: No such file or directory。</p>

<p>执行命令安装套件 ncurses devel：</p>

<h5 id="apt-get-install-libncurses5-dev-1">#apt-get install libncurses5-dev</h5>

<p>在之后出现的对话框中选择 save 保存配置信息，文件名采用默认的.config，再选择 exit 退出。</p>

<p>编译内核执行命令(可使用 make -j4 (4核CPU)或make -j2(2核CPU)来加快编译速度)：</p>

<h5 id="make-j4">#make -j4</h5>

<p>内核配置完成后，执行 make 命令开始编译内核，如果编译成功，则生成 Linux 启动映像文件 bzImage(位于./arch/x86_64/boot/bzImage中)。</p>

<p>编译过程中，可能会出现一些错误，通常都是因为缺少某个库，一般根据相应的错误提示，安装相应的包即可，然后重新编译：</p>

<h5 id="1-缺少-openssl">(1).缺少 openssl：</h5>

<h5 id="apt-get-install-libssl-dev">#apt-get install libssl-dev</h5>

<h5 id="2-缺少-bison">(2).缺少 bison：</h5>

<h5 id="apt-get-install-bison">#apt-get install bison</h5>

<h5 id="3-缺少-flex">(3).缺少 flex :</h5>

<h5 id="apt-get-install-flex">#apt-get install flex</h5>

<p>内核编译一般都需要挺长时间(我花了将近三个小时)，所以需要有耐心，可以在编译期间可以去做一些其他的事。</p>

<p><br/><br/></p>

<h3 id="五-编译模块和安装内核">五.编译模块和安装内核</h3>

<p>依次执行以下命令：</p>

<p>编译模块：</p>

<h5 id="make-modules">#make modules</h5>

<p>安装模块：</p>

<h5 id="make-modules-install">#make modules_install</h5>

<p>编译和安装模块也花了不少时间。</p>

<p>再安装内核：</p>

<h5 id="make-install">#make install</h5>

<p>配置 grub 引导程序(该命令会自动修改 grub)：</p>

<h5 id="update-grub2">#update-grub2</h5>

<p><br/><br/></p>

<h3 id="六-重启系统">六.重启系统</h3>

<p>重启后系统就会自动启动新的内核(不过似乎是要安装的内核版本高于虚拟机的内核版本才会自动启动新的内核)，如果重启后内核还是之前的内核，可以采取以下操作：</p>

<p>执行命令：</p>

<h5 id="vim-etc-default-grub">#vim /etc/default/grub</h5>

<p>将GRUB_TIMEOUT_STYLE = HIDDEN注释，并将GRUB_TIMEOUT的值(也就是启动选择界面会出现多少秒)设置为一个较大的值，这里改为了10。</p>

<p><img src="https://github.com/forever-crazy/forever-crazy.github.io/tree/master/images/grub.jpg" alt="配置grub" /></p>

<p>然后重启时就可以在启动界面选择需要启动的内核，启动完成后进入终端查看内核版本：</p>

<h5 id="uname-a">#uname -a</h5>

<p><img src="https://github.com/forever-crazy/forever-crazy.github.io/tree/master/images/core.jpg" alt="内核版本" /></p>

<p><br/><br/></p>

<h3 id="七-编写程序测试系统调用">七.编写程序测试系统调用</h3>

<p>编写的程序代码如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="cp">#include</span><span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="cp">#include</span><span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span><span class="cp">#include</span><span class="cpf">&lt;sys/syscall.h&gt;</span><span class="cp">
</span><span class="cp">#define __NR_MYSETNICE 335
</span><span class="cp"></span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">flag1</span><span class="p">,</span> <span class="n">flag2</span><span class="p">,</span> <span class="n">nicevalue1</span><span class="p">,</span> <span class="n">nicevalue2</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">nice</span><span class="p">,</span> <span class="n">prio</span><span class="p">;</span>
	<span class="n">pid_t</span> <span class="n">id</span><span class="p">;</span>

	<span class="n">id</span> <span class="o">=</span> <span class="n">getpid</span><span class="p">();</span>
	
	<span class="n">printf</span><span class="p">(</span><span class="s">&#34;分别输入第一次的flag值和nicevalue值：&#34;</span><span class="p">);</span>
	<span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%d %d&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">flag1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">nicevalue1</span><span class="p">);</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">&#34;分别输入第二次的flag值和nicevalue值：&#34;</span><span class="p">);</span>
	<span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%d %d&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">flag2</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">nicevalue2</span><span class="p">);</span>
	
	<span class="n">syscall</span><span class="p">(</span><span class="n">__NR_MYSETNICE</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">flag1</span><span class="p">,</span> <span class="n">nicevalue1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">prio</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">nice</span><span class="p">);</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">&#34;第一次: prio:%d, nice:%d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">prio</span><span class="p">,</span> <span class="n">nice</span><span class="p">);</span>

	<span class="n">syscall</span><span class="p">(</span><span class="n">__NR_MYSETNICE</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">flag2</span><span class="p">,</span> <span class="n">nicevalue2</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">prio</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">nice</span><span class="p">);</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">&#34;第二次: prio:%d, nice:%d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">prio</span><span class="p">,</span> <span class="n">nice</span><span class="p">);</span>
	
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>
<p>运行结果如下：</p>

<p><img src="https://github.com/forever-crazy/forever-crazy.github.io/tree/master/images/prio_nice.jpg" alt="测试程序运行结果" /></p>

<p>用户空间的进程初始化时默认是prio=20，nice=0，并且prio和nice有对应关系：prio = nice + 20。</p>
]]></content>
		</item>
		
		<item>
			<title>Week-2 一些基础的numpy笔记</title>
			<link>https://forever-crazy.github.io/posts/week-2/</link>
			<pubDate>Thu, 09 Apr 2020 21:16:17 +0800</pubDate>
			
			<guid>https://forever-crazy.github.io/posts/week-2/</guid>
			<description>import numpy as np #访问数组元素 x = np.arange(100).reshape(10, 10) y = x[[1, 2, 3]] z = x[[1, 2, 3, 4], [3, 2, 1, 5]] # y:[[10 11 12 13 14 15 16 17 18 19] # [20 21 22 23 24 25 26 27 28 29] # [30 31 32 33 34 35 36 37 38 39]] # z:[13 22 31 45] #随机函数 a = np.random.randn(2, 3) #生成指定维度的标准正态分布(以0为均值,1为标准差)的数据 b = np.</description>
			<content type="html"><![CDATA[<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>

<span class="c1">#访问数组元素</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">x</span><span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]]</span>                      
<span class="n">z</span> <span class="o">=</span> <span class="n">x</span><span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">]]</span>     
<span class="c1"># y:[[10 11 12 13 14 15 16 17 18 19]</span>
<span class="c1">#    [20 21 22 23 24 25 26 27 28 29]</span>
<span class="c1">#    [30 31 32 33 34 35 36 37 38 39]]</span>
<span class="c1"># z:[13 22 31 45]</span>




<span class="c1">#随机函数</span>
<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>               <span class="c1">#生成指定维度的标准正态分布(以0为均值,1为标准差)的数据</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>                <span class="c1">#生成指定维度的[0,1)之间的数据</span>
<span class="n">c</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>     <span class="c1">#生成指定维度的[low, high)之间的数据</span>
<span class="n">d</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">normal</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>  <span class="c1">#生成指定维度,均值和标准差的数据</span>
<span class="c1"># np.random.randint(low, high, size=None)</span>
<span class="c1"># np.random.normal(loc=0.0, scale=1.0, size=None)  loc-均值, scale-标准差, size-输出数组的维度</span>

<span class="c1"># a:[[ 0.33657969 -1.61872007 -0.27066839]</span>
<span class="c1">#    [-0.53723194 -0.97942758 -0.1125657 ]]</span>
<span class="c1"># b:[[0.47498773 0.75084041 0.18145901]</span>
<span class="c1">#    [0.49586018 0.55316644 0.29942542]]</span>
<span class="c1"># c:[[4 3 1]</span>
<span class="c1">#    [3 1 2]]</span>
<span class="c1"># d:[[-0.73128138  0.79407804 -1.6553577 ]</span>
<span class="c1">#    [ 0.88243182 -1.17655312  3.52462544]]</span>

<span class="c1"># np.random.choice(a, size=None) -- 从[0,a)中随机抽取数字,并返回指定大小的数组(一维数组)</span>
<span class="n">x1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>         <span class="c1">#返回一个[0,5)的数字</span>
<span class="n">x2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>     <span class="c1">#返回一个含有10个[0,5)数字的一维数组</span>
<span class="c1"># x1 = 2</span>
<span class="c1"># x2 = [1 0 2 4 1 2 4 4 4 1]</span>




<span class="c1"># np.maximum, np.exp, np.argmax, np.zeros, np.ones, np.append, np.where</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>
<span class="n">n</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">6</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">])</span>
<span class="n">k</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">maximum</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>       <span class="c1">#将两个数组(或一个数组和一个数字)逐位比较,选择最大值,返回数组</span>
<span class="c1"># k = [6 2 2 7 8]</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>
<span class="n">a1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>       <span class="c1">#e的幂次方</span>
<span class="n">a2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>       <span class="c1">#e为底的底数计算</span>
<span class="c1"># [ 2.71828183   7.3890561   20.08553692  54.59815003 148.4131591 ]</span>
<span class="c1"># [ 0.           0.69314718  1.09861229   1.38629436  1.60943791  ]</span>

<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>
<span class="n">c</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>     <span class="c1">#返回最大值在数组中对应的下标</span>
<span class="c1"># c = 2</span>

<span class="n">y1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
<span class="n">y2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
<span class="c1"># y1:[[0. 0. 0.]</span>
<span class="c1">#     [0. 0. 0.]]</span>
<span class="c1"># y2:[[1. 1. 1.]</span>
<span class="c1">#     [1. 1. 1.]]</span>

<span class="n">x1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">x2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">])</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">x1</span><span class="p">,</span> <span class="n">x2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>    
<span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">x1</span><span class="p">,</span> <span class="n">x2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>    <span class="c1">#即np.append(x1, x2)</span>
<span class="c1"># x:[[1 -1]         </span>
<span class="c1">#    [2 -2]</span>
<span class="c1">#    [3 -3]]</span>
<span class="c1"># y:[1, 2, 3, -1, -2, -3]</span>

<span class="n">a</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">]]</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">,</span> <span class="s2">&#34;Yes&#34;</span><span class="p">,</span> <span class="s2">&#34;No&#34;</span><span class="p">)</span>
<span class="c1"># b:[[&#39;No&#39;  &#39;Yes&#39; &#39;Yes&#39;]</span>
<span class="c1">#    [&#39;Yes&#39; &#39;Yes&#39; &#39;Yes&#39;]</span>
<span class="c1">#    [&#39;No&#39;  &#39;Yes&#39; &#39;Yes&#39;]]</span>

<span class="c1"># axis = 0(按列计算),axis = 1(按行计算)</span>

<span class="n">m</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>
<span class="n">n</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">6</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>
<span class="n">z</span> <span class="o">=</span> <span class="n">n</span> <span class="o">*</span> <span class="p">(</span><span class="n">m</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
<span class="c1"># z = [0 2 3 0 5]</span>




<span class="c1"># array数组和matrix矩阵的区别:</span>
<span class="c1"># matrix只能是二维的，array可以是多维的</span>
<span class="c1"># array中的相乘是对应元素的相乘，而matrix中的相乘得到的是矩阵积</span>
<span class="n">a1</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]]</span>
<span class="n">a2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">mat</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>
<span class="n">a3</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">mat</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>
<span class="n">a4</span> <span class="o">=</span> <span class="n">a2</span> <span class="o">*</span> <span class="n">a3</span><span class="o">.</span><span class="n">T</span>   <span class="c1">#(a4 = np.dot(a2, a3.T))</span>
<span class="c1"># a4:[[14 32]</span>
<span class="c1">#     [32 77]]</span>

<span class="n">a1</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]]</span>
<span class="n">a2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>
<span class="n">a3</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>
<span class="n">a4</span> <span class="o">=</span> <span class="n">a2</span> <span class="o">*</span> <span class="n">a3</span>
<span class="c1"># a4:[[ 1  4  9]</span>
<span class="c1">#     [16 25 36]]</span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Week-1 mnist手写数字识别</title>
			<link>https://forever-crazy.github.io/posts/week-1/</link>
			<pubDate>Sun, 05 Apr 2020 10:42:49 +0800</pubDate>
			
			<guid>https://forever-crazy.github.io/posts/week-1/</guid>
			<description>实现了一个简单的mnist手写数字识别的3层神经网络，没什么技术含量。
在这里采用了正态分布来初始化权重值，使用sigmoid函数当激活函数。
import scipy.special import pandas as pd import numpy as np class NeutralNetwork(): def __init__(self,inputnumber, hidenumber, outnumber, learningrate): self.inum = inputnumber self.hnum = hidenumber self.onum = outnumber self.lr = learningrate # np.random.normal(loc=0.0, scale=1.0, size=None) loc-均值, scale-标准差, size-输出数组的维度 self.inputweight = np.random.normal(0.0, pow(self.hnum, -0.5), (self.hnum, self.inum)) self.hideweight = np.random.normal(0.0, pow(self.onum, -0.5), (self.onum, self.hnum)) self.activation_function = lambda x : scipy.special.expit(x) # sigmoid函数 def train(self, inputlist, outputlist): inlist = np.array(inputlist).reshape(-1, 1) oulist = np.</description>
			<content type="html"><![CDATA[<p>实现了一个简单的mnist手写数字识别的3层神经网络，没什么技术含量。</p>

<p>在这里采用了正态分布来初始化权重值，使用sigmoid函数当激活函数。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">scipy.special</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="kn">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>

<span class="k">class</span> <span class="nc">NeutralNetwork</span><span class="p">():</span>
  <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">inputnumber</span><span class="p">,</span> <span class="n">hidenumber</span><span class="p">,</span> <span class="n">outnumber</span><span class="p">,</span> <span class="n">learningrate</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">inum</span> <span class="o">=</span> <span class="n">inputnumber</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">hnum</span> <span class="o">=</span> <span class="n">hidenumber</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">onum</span> <span class="o">=</span> <span class="n">outnumber</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">lr</span> <span class="o">=</span> <span class="n">learningrate</span>

    <span class="c1"># np.random.normal(loc=0.0, scale=1.0, size=None)  loc-均值, scale-标准差, size-输出数组的维度</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">inputweight</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">normal</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="nb">pow</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">hnum</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.5</span><span class="p">),</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">hnum</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">inum</span><span class="p">))</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">hideweight</span>  <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">normal</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="nb">pow</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">onum</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.5</span><span class="p">),</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">onum</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">hnum</span><span class="p">))</span>

    <span class="bp">self</span><span class="o">.</span><span class="n">activation_function</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span> <span class="n">scipy</span><span class="o">.</span><span class="n">special</span><span class="o">.</span><span class="n">expit</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>       <span class="c1"># sigmoid函数</span>

  <span class="k">def</span> <span class="nf">train</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">inputlist</span><span class="p">,</span> <span class="n">outputlist</span><span class="p">):</span>
    <span class="n">inlist</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">inputlist</span><span class="p">)</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">oulist</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">outputlist</span><span class="p">)</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    
    <span class="n">hideinput</span>   <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">inputweight</span><span class="p">,</span> <span class="n">inlist</span><span class="p">)</span>
    <span class="n">hideoutput</span>  <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">activation_function</span><span class="p">(</span><span class="n">hideinput</span><span class="p">)</span>

    <span class="n">finalinput</span>  <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">hideweight</span><span class="p">,</span> <span class="n">hideoutput</span><span class="p">)</span>
    <span class="n">finaloutput</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">activation_function</span><span class="p">(</span><span class="n">finalinput</span><span class="p">)</span>

    <span class="n">output_error</span> <span class="o">=</span> <span class="n">oulist</span> <span class="o">-</span> <span class="n">finaloutput</span>
    <span class="n">hidden_error</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">hideweight</span><span class="o">.</span><span class="n">T</span><span class="p">,</span> <span class="n">output_error</span><span class="p">)</span>

    <span class="c1">#更新权重</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">hideweight</span>  <span class="o">+=</span> <span class="bp">self</span><span class="o">.</span><span class="n">lr</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">((</span><span class="n">output_error</span> <span class="o">*</span> <span class="n">finaloutput</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">finaloutput</span><span class="p">)),</span> 
                                        <span class="n">np</span><span class="o">.</span><span class="n">transpose</span><span class="p">(</span><span class="n">hideoutput</span><span class="p">))</span>      
    <span class="bp">self</span><span class="o">.</span><span class="n">inputweight</span> <span class="o">+=</span> <span class="bp">self</span><span class="o">.</span><span class="n">lr</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">((</span><span class="n">hidden_error</span> <span class="o">*</span> <span class="n">hideoutput</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">hideoutput</span><span class="p">)),</span>
                                        <span class="n">np</span><span class="o">.</span><span class="n">transpose</span><span class="p">(</span><span class="n">inlist</span><span class="p">))</span>

  <span class="k">def</span> <span class="nf">query</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">inputlist</span><span class="p">):</span>
    <span class="n">inlist</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">inputlist</span><span class="p">)</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    
    <span class="n">hideinput</span>   <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">inputweight</span><span class="p">,</span> <span class="n">inlist</span><span class="p">)</span>
    <span class="n">hideoutput</span>  <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">activation_function</span><span class="p">(</span><span class="n">hideinput</span><span class="p">)</span>

    <span class="n">finalinput</span>  <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">hideweight</span><span class="p">,</span> <span class="n">hideoutput</span><span class="p">)</span>
    <span class="n">finaloutput</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">activation_function</span><span class="p">(</span><span class="n">finalinput</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">finaloutput</span>

<span class="n">inputnumber</span>  <span class="o">=</span> <span class="mi">784</span>
<span class="n">hidenumber</span>   <span class="o">=</span> <span class="mi">100</span>
<span class="n">outputnumber</span> <span class="o">=</span> <span class="mi">10</span>
<span class="n">learningrate</span> <span class="o">=</span> <span class="mf">0.1</span>

<span class="n">text</span> <span class="o">=</span> <span class="n">NeutralNetwork</span><span class="p">(</span><span class="n">inputnumber</span><span class="p">,</span> <span class="n">hidenumber</span><span class="p">,</span> <span class="n">outputnumber</span><span class="p">,</span> <span class="n">learningrate</span><span class="p">)</span>

<span class="n">train_data</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;mnist\mnist_train.csv&#34;</span><span class="p">,</span> <span class="n">header</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="n">usecols</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">785</span><span class="p">)])</span>
<span class="n">test_data</span>  <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;mnist\mnist_test.csv&#34;</span><span class="p">,</span> <span class="n">header</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="n">usecols</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">785</span><span class="p">)])</span>

<span class="n">train_samples</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">train_data</span><span class="o">.</span><span class="n">shape</span>      <span class="c1"># train_samples 训练样本数量</span>
<span class="n">test_samples</span><span class="p">,</span> <span class="n">_</span>  <span class="o">=</span> <span class="n">test_data</span><span class="o">.</span><span class="n">shape</span>       <span class="c1"># test_samples 测试样本数量</span>

<span class="n">epoches</span> <span class="o">=</span> <span class="mi">10</span>      <span class="c1">#迭代次数</span>
<span class="k">for</span> <span class="n">epoch</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">epoches</span><span class="p">):</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">train_samples</span><span class="p">):</span>
    <span class="n">train_X</span>  <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">train_data</span><span class="p">)[</span><span class="n">i</span> <span class="p">,</span> <span class="mi">1</span><span class="p">:]</span> <span class="o">/</span> <span class="mf">255.0</span> <span class="o">*</span> <span class="mf">0.99</span> <span class="o">+</span> <span class="mf">0.01</span>    <span class="c1">#归一化(将所有输入数据变成(0, 1)之间的小数)</span>
    <span class="n">y_value</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">train_data</span><span class="p">)[</span><span class="n">i</span> <span class="p">,</span> <span class="mi">0</span><span class="p">]</span>      <span class="c1">#输入数据对应的类别标签</span>
    <span class="n">train_y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">outputnumber</span><span class="p">)</span> <span class="o">+</span> <span class="mf">0.01</span>
    <span class="n">train_y</span><span class="p">[</span><span class="n">y_value</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.99</span>                    <span class="c1">#将类别标签转换为one hot编码</span>
    <span class="n">text</span><span class="o">.</span><span class="n">train</span><span class="p">(</span><span class="n">train_X</span><span class="p">,</span> <span class="n">train_y</span><span class="p">)</span>               <span class="c1">#训练数据</span>

<span class="n">true_samples</span> <span class="o">=</span> <span class="mi">0</span>         <span class="c1">#测试样本中预测正确的样本数量</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">test_samples</span><span class="p">):</span>
  <span class="n">test_X</span> <span class="o">=</span> <span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">test_data</span><span class="p">)[</span><span class="n">i</span> <span class="p">,</span> <span class="mi">1</span><span class="p">:])</span> <span class="o">/</span> <span class="mf">255.0</span> <span class="o">*</span> <span class="mf">0.99</span> <span class="o">+</span> <span class="mf">0.01</span>
  <span class="n">y_pred</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">test_X</span><span class="p">)</span>                <span class="c1">#训练测试样本数据所预测的类别标签</span>
  <span class="n">test_y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">test_data</span><span class="p">)[</span><span class="n">i</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>
  <span class="k">if</span> <span class="n">np</span><span class="o">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">y_pred</span><span class="p">)</span> <span class="o">==</span> <span class="n">test_y</span><span class="p">:</span>            <span class="c1">#比较预测标签和给定标签是否相等</span>
    <span class="n">true_samples</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="n">accuracy</span> <span class="o">=</span> <span class="n">true_samples</span> <span class="o">/</span> <span class="n">test_samples</span>       <span class="c1">#正确率</span>
<span class="k">print</span><span class="p">(</span><span class="n">accuracy</span><span class="p">)</span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Week-0 从零开始</title>
			<link>https://forever-crazy.github.io/posts/week-0/</link>
			<pubDate>Mon, 23 Mar 2020 00:00:00 +0000</pubDate>
			
			<guid>https://forever-crazy.github.io/posts/week-0/</guid>
			<description>​ 其实很早就有写博客的想法，但到真正下笔时却总是被我以各种理由开脱，理由也不外乎两个：一是总觉得自己水平太低，脑子里没货，实在想不出写什么；二是碍于贫乏的词汇量和表达能力，我总是无法准确清楚地表达出自己的想法和理解。(好吧，或许还是因为我太懒qwq
​ 就这样，磨蹭了很久，直到今天终于下定决心开始写博客，去养成一个好的习惯，也不管写什么，反正只要能写出东西就可以。当然咯，我毕竟还太菜，写出来的东西水平或许还太低，不过没关系，从零开始，每次写一点点，每次进步一点点，量变终究会引起质变。
Come on!!!</description>
			<content type="html"><![CDATA[<p>​    其实很早就有写博客的想法，但到真正下笔时却总是被我以各种理由开脱，理由也不外乎两个：一是总觉得自己水平太低，脑子里没货，实在想不出写什么；二是碍于贫乏的词汇量和表达能力，我总是无法准确清楚地表达出自己的想法和理解。(好吧，或许还是因为我太懒qwq</p>

<p>​    就这样，磨蹭了很久，直到今天终于下定决心开始写博客，去养成一个好的习惯，也不管写什么，反正只要能写出东西就可以。当然咯，我毕竟还太菜，写出来的东西水平或许还太低，不过没关系，从零开始，每次写一点点，每次进步一点点，量变终究会引起质变。</p>

<p>Come on!!!</p>
]]></content>
		</item>
		
		<item>
			<title>Getting Started with Hugo</title>
			<link>https://forever-crazy.github.io/posts/getting-started-with-hugo/</link>
			<pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
			
			<guid>https://forever-crazy.github.io/posts/getting-started-with-hugo/</guid>
			<description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
			<content type="html"><![CDATA[

<h2 id="step-1-install-hugo">Step 1. Install Hugo</h2>

<p>Go to <a href="https://github.com/spf13/hugo/releases">Hugo releases</a> and download the
appropriate version for your OS and architecture.</p>

<p>Save it somewhere specific as we will be using it in the next step.</p>

<p>More complete instructions are available at <a href="https://gohugo.io/getting-started/installing/">Install Hugo</a></p>

<h2 id="step-2-build-the-docs">Step 2. Build the Docs</h2>

<p>Hugo has its own example site which happens to also be the documentation site
you are reading right now.</p>

<p>Follow the following steps:</p>

<ol>
<li>Clone the <a href="http://github.com/spf13/hugo">Hugo repository</a></li>
<li>Go into the repo</li>
<li>Run hugo in server mode and build the docs</li>
<li>Open your browser to <a href="http://localhost:1313">http://localhost:1313</a></li>
</ol>

<p>Corresponding pseudo commands:</p>

<pre><code>git clone https://github.com/spf13/hugo
cd hugo
/path/to/where/you/installed/hugo server --source=./docs
&gt; 29 pages created
&gt; 0 tags index created
&gt; in 27 ms
&gt; Web Server is available at http://localhost:1313
&gt; Press ctrl+c to stop
</code></pre>

<p>Once you&rsquo;ve gotten here, follow along the rest of this page on your local build.</p>

<h2 id="step-3-change-the-docs-site">Step 3. Change the docs site</h2>

<p>Stop the Hugo process by hitting Ctrl+C.</p>

<p>Now we are going to run hugo again, but this time with hugo in watch mode.</p>

<pre><code>/path/to/hugo/from/step/1/hugo server --source=./docs --watch
&gt; 29 pages created
&gt; 0 tags index created
&gt; in 27 ms
&gt; Web Server is available at http://localhost:1313
&gt; Watching for changes in /Users/spf13/Code/hugo/docs/content
&gt; Press ctrl+c to stop
</code></pre>

<p>Open your <a href="http://vim.spf13.com">favorite editor</a> and change one of the source
content pages. How about changing this very file to <em>fix the typo</em>. How about changing this very file to <em>fix the typo</em>.</p>

<p>Content files are found in <code>docs/content/</code>. Unless otherwise specified, files
are located at the same relative location as the url, in our case
<code>docs/content/overview/quickstart.md</code>.</p>

<p>Change and save this file.. Notice what happened in your terminal.</p>

<pre><code>&gt; Change detected, rebuilding site

&gt; 29 pages created
&gt; 0 tags index created
&gt; in 26 ms
</code></pre>

<p>Refresh the browser and observe that the typo is now fixed.</p>

<p>Notice how quick that was. Try to refresh the site before it&rsquo;s finished building. I double dare you.
Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.</p>

<h2 id="step-4-have-fun">Step 4. Have fun</h2>

<p>The best way to learn something is to play with it.</p>
]]></content>
		</item>
		
	</channel>
</rss>
