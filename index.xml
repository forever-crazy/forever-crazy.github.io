<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo Hermit</title>
    <link>https://forever-crazy.github.io/</link>
    <description>Recent content on Hugo Hermit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 May 2020 11:07:58 +0800</lastBuildDate>
    
	<atom:link href="https://forever-crazy.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Week-3~5 操作系统实验一：Linux 内核编译及添加系统调用</title>
      <link>https://forever-crazy.github.io/posts/week-3~5/</link>
      <pubDate>Thu, 07 May 2020 11:07:58 +0800</pubDate>
      
      <guid>https://forever-crazy.github.io/posts/week-3~5/</guid>
      <description>前段时间一直在折腾操作系统实验一的作业，前前后后我花了两个多星期在这作业上，踩了不少坑。不过最后好歹是搞成功了，也算是有点收获，刚好在这里记录一下。
作业内容要求如下：
 (1).添加一个系统调用，实现对指定进程的 nice 值的修改或读取功能，并返回进程最新的 nice 值及优先级 prio。建议调用原型为： int mysetnice(pid_t pid, int flag, int nicevalue, void __user * prio, void __user * nice); 参数含义：  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pid：进程 ID。&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;flag：若值为 0，表示读取 nice 值；若值为 1，表示修改 nice 值。 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nicevalue：为指定进程设置的新 nice 值。 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;prio、nice：指向进程当前优先级 prio 及 nice 值。返回值：系统调用成功时返回 0，失败时返回错误码 EFAULT。 (2).写一个简单的应用程序测试 (1) 中添加的系统调用。 (3).若程序中调用了 Linux 的内核函数，要求深入阅读相关函数源码。  首先要搞清楚这几个概念：
(1).prio：prio值表示进程的优先级，进程prio值越小则优先级越高。 (2).nice：nice值表示进程优先级的修正数值，范围是从-20到19。正值表示调整到低优先级，负值表示调整到高优先级，值为零则表示不会调整该进程的优先级。 (3).pid_t： typedef __kernel_pid_t pid_t; typedef int __kernel_pid_t; 可以看出pid_t其实就是int类型，使用pid_t是为了可移植性好一些，因为在不同的平台上可能会有： typedef int pid_t; 或： typedef long pid_t; (4).</description>
    </item>
    
    <item>
      <title>Week-2 一些基础的numpy笔记</title>
      <link>https://forever-crazy.github.io/posts/week-2/</link>
      <pubDate>Thu, 09 Apr 2020 21:16:17 +0800</pubDate>
      
      <guid>https://forever-crazy.github.io/posts/week-2/</guid>
      <description>import numpy as np #访问数组元素 x = np.arange(100).reshape(10, 10) y = x[[1, 2, 3]] z = x[[1, 2, 3, 4], [3, 2, 1, 5]] # y:[[10 11 12 13 14 15 16 17 18 19] # [20 21 22 23 24 25 26 27 28 29] # [30 31 32 33 34 35 36 37 38 39]] # z:[13 22 31 45] #随机函数 a = np.random.randn(2, 3) #生成指定维度的标准正态分布(以0为均值,1为标准差)的数据 b = np.</description>
    </item>
    
    <item>
      <title>Week-1 mnist手写数字识别</title>
      <link>https://forever-crazy.github.io/posts/week-1/</link>
      <pubDate>Sun, 05 Apr 2020 10:42:49 +0800</pubDate>
      
      <guid>https://forever-crazy.github.io/posts/week-1/</guid>
      <description>实现了一个简单的mnist手写数字识别的3层神经网络，没什么技术含量。
在这里采用了正态分布来初始化权重值，使用sigmoid函数当激活函数。
import scipy.special import pandas as pd import numpy as np class NeutralNetwork(): def __init__(self,inputnumber, hidenumber, outnumber, learningrate): self.inum = inputnumber self.hnum = hidenumber self.onum = outnumber self.lr = learningrate # np.random.normal(loc=0.0, scale=1.0, size=None) loc-均值, scale-标准差, size-输出数组的维度 self.inputweight = np.random.normal(0.0, pow(self.hnum, -0.5), (self.hnum, self.inum)) self.hideweight = np.random.normal(0.0, pow(self.onum, -0.5), (self.onum, self.hnum)) self.activation_function = lambda x : scipy.special.expit(x) # sigmoid函数 def train(self, inputlist, outputlist): inlist = np.array(inputlist).reshape(-1, 1) oulist = np.</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://forever-crazy.github.io/about-hugo/</link>
      <pubDate>Mon, 23 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://forever-crazy.github.io/about-hugo/</guid>
      <description>菜鸡一枚，现就读于杭州一不知名高校，计算机专业。
性格内向，不喜欢热闹，在生人面前比较腼腆，在熟人面前会放飞自我。
平常喜欢打LOL，偶尔玩csgo，但水平实在让人不敢恭维（好歹也玩了这么多年，还这么菜qwq
喜欢看宫崎骏的电影，其中最喜欢《龙猫》和《魔女宅急便》，每次看时自己都会沉浸到那个淳朴美好的世界中，压抑的心情好了不少。
进大学这么久了，感觉啥都没学到，啥都不会，白白荒废了这么久的时间，终于下定决心好好学习（希望不是真香233&amp;hellip;</description>
    </item>
    
    <item>
      <title>Week-0 从零开始</title>
      <link>https://forever-crazy.github.io/posts/week-0/</link>
      <pubDate>Mon, 23 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://forever-crazy.github.io/posts/week-0/</guid>
      <description>​ 其实很早就有写博客的想法，但到真正下笔时却总是被我以各种理由开脱，理由也不外乎两个：一是总觉得自己水平太低，脑子里没货，实在想不出写什么；二是碍于贫乏的词汇量和表达能力，我总是无法准确清楚地表达出自己的想法和理解。(好吧，或许还是因为我太懒qwq
​ 就这样，磨蹭了很久，直到今天终于下定决心开始写博客，去养成一个好的习惯，也不管写什么，反正只要能写出东西就可以。当然咯，我毕竟还太菜，写出来的东西水平或许还太低，不过没关系，从零开始，每次写一点点，每次进步一点点，量变终究会引起质变。
Come on!!!</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://forever-crazy.github.io/posts/getting-started-with-hugo/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://forever-crazy.github.io/posts/getting-started-with-hugo/</guid>
      <description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
  </channel>
</rss>